#!/bin/bash
clear
# This part of the code creates a visual indicator of how much progress has been made
# It takes two inputs: the current value and the maximum value
function ProgressBar {
# This part of the code calculates how much percentage of the maximum value has been reached
    (( _progress=(${1}*100/${2}*100)/100 ))
# This part of the code determines how many symbols to use for the filled and empty parts of the indicator
    (( _done=(${_progress}*4)/10 ))
    (( _left=40-_done ))
# This part of the code creates strings of symbols for the filled and empty parts of the indicator
    _fill=$(printf "%${_done}s")
    _empty=$(printf "%${_left}s")

# This part of the code prints out the indicator on one line, showing the current value, the result message, and the percentage
printf "\rKey %s %s [%s%s] %s%%" "$1" "$3" "${_fill// /#}" "${_empty// /-}" "$_progress"

}
# This part of the code defines a function that saves the current value to a file
function save {
  printf "Saving...\n"
  printf "%s\n" "${value}" > "${devfile}"
}
# This part of the code makes sure that when you exit or interrupt the program, it will save your progress and quit gracefully
trap 'save; exit' EXIT
# This part of the code gets your device name from fastboot and prints it out
devices=( $(fastboot devices) )
device="${devices[0]}"
printf "Current device: %s\n" "$device"
# This part of the code creates a file name based on your device name
devfile="./${device}.dat"
# This part of the code checks if you have a file with your previous progress, and if not, it starts from 1000000000000000
if [[ ! -f $devfile ]] ; then
	value=1000000000000000
else # If you have a file with your previous progress, it reads it and assigns it to value 
	read -r value < "${devfile}"
fi

while true; do # This part of the code repeats until it finds your unlock code or reaches 9999999999999999 
		# This part of the code tries to unlock your device with fastboot using value as unlock code and stores what fastboot says in output 
		output=( $(fastboot oem unlock ${value} 2>&1) )
		if [[ "${output[1]}" != *"FAILED"* ]]; then # If fastboot says something other than FAILED, it means you found your unlock code 
			printf "Your unlock code is: %s\n" "$value" # It prints out your unlock code and stops repeating 
			break 
		fi  
		ProgressBar "${value}" 9999999999999999 "${output[1]}" # It updates your progress indicator with your current value and result message 
		(( value++ )) # It increases your value by one for next try 
	done;
